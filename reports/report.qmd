---
title: Homework 8 - World Bank Analysis
---

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc408-sp2025-hw8-Kelrap>


# Problem Background

```{python}
from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

# Load these variables from .env file.
config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx,config = create_db_wrapper( config_map )
  
```


```{python}
# Do a quick test of the connection and trap the errors better!

run_sql_and_return_html(cnx,"""
select
  table_schema, table_name, table_rows
from
  information_schema.tables
where
  table_schema in ('world_bank_data')
""")

```

# Exercises

In the following exercises, write the SQL as requested to discover the answer.

## Task 1

How many records are in the country table?

```{python}
# How many records are in the world_bank_data.wdi_country table?
# (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select
  count(*) as "Row Count"
from
  world_bank_data.wdi_country
""")

```

## Task 2

Explore the first 5 records in the country table.

```{python}
## write out the first 5 records and look at the columns
## Do you see any blanks or missing data?
## (skills: select, limit)

run_sql_and_return_html(cnx,"""
select
  *
from 
  world_bank_data.wdi_country
limit 5
""")

```


## Task 3

List all non-countries.

```{python}
## task 3
## Which records are NOT for countries, that is they're for regions or groups of countries.
## How can you tell?
## Once you figure it out, write a query to list all the non-countries
## (skills: select, where)

run_sql_and_return_html(cnx,"""
select
  `Short Name`
from 
  world_bank_data.wdi_country
where
  region is null
""")
```

## Task 4

Create your own copy of WDI_Country containing just countries.

```{python}
## task 4
## The WDI table clearly contains information for countries and non-countries
## use CREATE TABLE ... SELECT from WHERE syntax.
## Below, write a query to return the number
## of records in the new table.
## (skills: select, aggregate)

# drop table
execute_ddl(cnx,"""
drop table if exists wdi_country;
""")
```

```{python}
# create table
execute_ddl(cnx,"""
create table 
  wdi_country 
as
  (select
    *
  from 
    world_bank_data.wdi_country
  where
    region is not null)
""")
```

```{python}
# show number of records
run_sql_and_return_html(cnx,"""
select
  count(*)
from 
  wdi_country
""")
```

## Task 5

According to the World Bank, in 2020 there were how many countries in the world?

```{python}
## (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select
  count(region)
from 
  wdi_country 
""")

```

## Task 6

What are all unique values of region in the wdi_country table?

```{python}
## Let's investigate the country_region field.
## What is the domain of the country_region field? That is,
## what are the unique values found there?
## (there are several possible ways to code this in SQL)
## (skills: select, aggregate, order by)

run_sql_and_return_html(cnx,"""
select 
  region
from
  wdi_country 
group by
  region
""")

```

## Task 7

How many countries are in each region?

```{python}
## How many countries are in each region?
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select 
  region, count(`Country Code`) as "Country Count"
from
  wdi_country 
group by
  region
""")

```

## Task 8

List the country full names and regions for all countries in north america.

```{python}
## List the country full names and regions for all countries in north america
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
select 
  `Long Name`, region
from
  wdi_country 
where
  region = "North America"
""")

```

## Task 9

```{python}
## The last World Cup soccer tournament was hosted by Qatar.
## What region contains Qatar?  List the region, country short name and full name
## (skills: select, where)

run_sql_and_return_html(cnx,"""
select 
  region, `Short Name`, `Long Name`
from 
  wdi_country 
where
  `Table Name` = "Qatar"
""")

```

## Task 10

```{python}
## There are two abbreviation fields in the data country_abbr and country_wb_abbr.
## List the country code, short name, abbr, wb_abbr and region for all the countries
## where the abbr and wb_abbr are different.
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
select 
  `Country Code`, `Short Name`, `2-alpha code`, `WB-2 code`, region
from 
  wdi_country 
where
  `2-alpha code` != `WB-2 code`
""")

```

## Task 11

```{python}
## Now, let's investigate the "income category" field.
## List the income categories and the number of countries in each
## income category in descending order of most countries to least.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select 
  `Income Group`, count(`Country Code`) as "Number of Countries"
from 
  wdi_country 
group by
  `Income Group`
order by
  count(`Country Code`)
  desc
""")

```

## Task 12

todo: replace run_sql_and_return_df with run_sql_and_return_html

```{python}
## Mystery task.  Looking at the table from Task 11 (anything odd?) write the
## next obvious query based on the results in the table.
## At a minimum, your query should put country short name in the first column.
## you will be scored on the number of records returned and the value(s) 
## in the first column.

run_sql_and_return_df(cnx,"""
select
  `Short Name`
from
  wdi_country 
where
  `Income Group` is null 
""")

```

## Task 13

```{python}
## OK, this HAS to be an error. Let's make a assumption that the country 
## in question, because they are oil-rich, are "high income".  
## Write an update comment to correct the issue.
## NOTE - if you get this wrong, all subsequent tables will be wrong!

execute_ddl(cnx,"""
update
  wdi_country 
SET 
  `Income Group` = "High income"
WHERE 
  `Short Name` = "Venezuela";
commit;
""")

```
```{python}
## Now, display the country again to verify the change stuck!

run_sql_and_return_df(cnx,"""
select
  `Short Name`
from
  wdi_country 
where
  `Income Group` is null 
""")

```

## Task 14

```{python}
## Write a single query that show the number of countries in each 
## "Region"-"Income Group" pair.  The table should have 3 columns:
## region, income group, and no.of.countries.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select 
  region, `Income Group`, count(`Country Code`) as "Country Count"
from 
  wdi_country 
group by
  region, `Income Group`
""")

```

## Task 15

```{python}
## Examine the result from task 14. It would be really cool to
## present the results of this table in a 2-D form, with 
## columns for each income category (high, upper middle, lower middle, low, other)
## regions down the side, and the pair-wise count inside each cell.
## Using CASE statements, DO IT!  BE SURE to include the countries without
## an income category.

## HINT - your query should return 6 columns: the region name, one
## column for each of the income categories (e.g., High, Upper middle, etc.)
## and a column for the row totals.
## (skills: select, aggregate, group by, nested query)

run_sql_and_return_df(cnx,"""
with base as (
  select 
    region
  from 
    wdi_country
  group by 
    region
),
high as (
    select region, count(`Country Code`) as value
    from wdi_country
    where `Income Group` = "High income" 
    group by region
),
up_mid as (
    select region, count(`Country Code`) as value
    from wdi_country
    where `Income Group` = "Upper middle income" 
    group by region
),
low_mid as (
    select region, count(`Country Code`) as value
    from wdi_country
    where `Income Group` = "Lower middle income" 
    group by region
),
low as (
    select region, count(`Country Code`) as value
    from wdi_country
    where `Income Group` = "Low income" 
    group by region
),
total as (
    select region, count(`Country Code`) as value
    from wdi_country
    group by region
)
select
  base.region, 
  case when high.value is null then 0 else high.value end as "High income",
  case when up_mid.value is null then 0 else up_mid.value end as "Upper middle income",
  case when low_mid.value is null then 0 else low_mid.value end as "Lower middle income",
  case when low.value is null then 0 else low.value end as "Low income",
  total.value as "Total"
from
  base 
  left join high on base.region = high.region
  left join up_mid on base.region = up_mid.region
  left join low_mid on base.region = low_mid.region
  left join low on base.region = low.region
  left join total on base.region = total.region
""")

```

## Task 16

```{python}
## Wow! what a cool table!  It is very interesting to see where the money
## sits around the world.  Using the general approach from Task 14 above
## and write a query to return the single region with the most lower-income
## countries.

## Your query should return 3 columns, the number of 
## low-income countries, the region name and the income group

## PUT THE NUMBER FIRST! (use: count, region name, income group)
## (skills: select, aggregate, group by, nested query, order by, limit)

run_sql_and_return_html(cnx,"""
with base as (
  select 
    region
  from 
    wdi_country
  group by 
    region
),
low as (
    select region, count(`Country Code`) as value
    from wdi_country
    where `Income Group` = "Low income" 
    group by region
    order by count(`Country Code`) desc
    limit 1
)
select
  low.value as "Number of low income countries",
  base.region,
  "Low income" as "Income Group"
from
  base 
  inner join low on (base.region = low.region)
""")

```

## Task 17

```{python}
## Are you getting the hand of this? Good! We need to take a look at all
## the countries in the same region and with the same income category as
## the Marshall Islands.
## For each country that matches, print their country code, short name,
## region and income category, by order of their short name.  As a hint,
## the country code for the Marshall Islands is MHL.
## (skills: select, where, subquery)

run_sql_and_return_html(cnx,"""
with marshall as (
  select
    region, `Income Group`
  from 
    wdi_country
  where
    `Country Code` = "MHL"
)
select 
  wdi_country.`Country Code`, wdi_country.`Short Name`, wdi_country.region, 
  wdi_country.`Income Group`
from 
  wdi_country 
  right join marshall on (marshall.region = wdi_country.region)
where
  marshall.`Income Group` = wdi_country.`Income Group`
order by 
  `Short Name`
""")

```

## Task 18

```{python}
## OK - let's raise the heat in the kitchen! Review the output from task 14.
## You'll see that some of the regions do not contain all of the income
## levels.  For example, the Europe & Central Asia region does not have
## any low income countries.
##
## CHALLENGE - using a SINGLE SQL statement, write a table that contains every
## combination of region and income category (including the missing '') values!
##
## THEN add a WHERE clause to only show the values that were missing from
## the original pairings!
##
## HINT - there should be AT MOST [# of regions]x[# of income cats] = 28
## rows in your final table, and there are 22 rows returned in the query
## in Task 14.  (FYI - I get 6 rows in my final table.)
## (skills: select, where, subqueries, joins)

run_sql_and_return_html(cnx,"""
with all_regions as (
  select
    region
  from 
    wdi_country
  group by
    region
),
all_incomes as (
  select
    `Income Group`
  from 
    wdi_country
  group by
    `Income Group`
)
select 
  all_regions.region, all_incomes.`Income Group`, 0 as "Number of countries"
from 
  all_regions
  cross join all_incomes
where 
  not exists (
    select region, `Income Group`
    from wdi_country
    group by region, `Income Group`
    having all_regions.region = wdi_country.region and
      all_incomes.`Income Group` = wdi_country.`Income Group`
  )
""")

```

## Task 19

```{python}
## Hot enough, yet?  Let's go for ghost-pepper HOT!  Now let's build some
## percentage tables.  For example, across the entire sample, what
## is the percentage of total countries in each income category?
##
## As a first step, build off the result from task 14 and create a table with
## six columns (region, income cat, country count, sum of countries in region,
## sum of countries by income and total sum countries).
##
## THEN, add a 7th column calculating the percent of total for each,
## region-income pair.
##
## actually calculating percentages and print out a table will be a
## slam dunk after this!
## (skills: select, where, subqueries, joins, aggregate functions)

run_sql_and_return_html(cnx,"""
with base as (
  select region,
    `Income Group`,
    count(wdi_country.`Country Code`) as "Country Count"
  from wdi_country
  group by region,
    `Income Group`
),
region_sum as (
  select region,
    sum(`Country Count`) as value
  from base
  group by region
),
income_sum as (
  select `Income Group`,
    sum(`Country Count`) as value
  from base
  group by `Income Group`
),
total_sum as (
  select sum(`Country Count`) as value
  from base
  limit 1
)
select base.region,
  base.`Income Group`,
  base.`Country Count`,
  region_sum.value as "Region sum",
  income_sum.value as "Income sum",
  round(total_sum.value, 0) as "Total sum",
  round((
    base.`Country Count` * 100.0 / total_sum.value + "%%"
  ), 1) as "Percentage"
from base
  left join region_sum on base.region = region_sum.region
  left join income_sum on base.`Income Group` = income_sum.`Income Group`
  cross join total_sum
""")


```

## Task 20

```{python}
## SLAM DUNK TIME!  Using the resulting table CTEs from Task 19,
## print table similar to the table in Task 15, with Income group in the
## columns, Region in the rows and Percent of total in each cell of the table.

run_sql_and_return_html(cnx,"""
WITH base AS (
  SELECT region
  FROM wdi_country
  GROUP BY region
),
total_sum AS (
  SELECT COUNT(`Country Code`)
  FROM wdi_country
),
high AS (
  SELECT region,
    (
      concat(
        COUNT(`Country Code`) * 100.0 / (
          SELECT COUNT(`Country Code`)
          FROM wdi_country
        ),
        "%%"
      )
    ) AS value
  FROM wdi_country
  WHERE `Income Group` = "High income"
  GROUP BY region
),
up_mid AS (
  SELECT region,
    (
      concat(
        COUNT(`Country Code`) * 100.0 / (
          SELECT COUNT(`Country Code`)
          FROM wdi_country
        ),
        "%%"
      )
    ) AS value
  FROM wdi_country
  WHERE `Income Group` = "Upper middle income"
  GROUP BY region
),
low_mid AS (
  SELECT region,
    (
      concat(
        COUNT(`Country Code`) * 100.0 / (
          SELECT COUNT(`Country Code`)
          FROM wdi_country
        ),
        "%%"
      )
    ) AS value
  FROM wdi_country
  WHERE `Income Group` = "Lower middle income"
  GROUP BY region
),
low AS (
  SELECT region,
    (
      concat(
        COUNT(`Country Code`) * 100.0 / (
          SELECT COUNT(`Country Code`)
          FROM wdi_country
        ),
        "%%"
      )
    ) AS value
  FROM wdi_country
  WHERE `Income Group` = "Low income"
  GROUP BY region
)
SELECT base.region,
  CASE
    WHEN high.value IS NULL THEN "0%%"
    ELSE high.value
  END AS "High income",
  CASE
    WHEN up_mid.value IS NULL THEN "0%%"
    ELSE up_mid.value
  END AS "Upper middle income",
  CASE
    WHEN low_mid.value IS NULL THEN "0%%"
    ELSE low_mid.value
  END AS "Lower middle income",
  CASE
    WHEN low.value IS NULL THEN "0%%"
    ELSE low.value
  END AS "Low income",
  (
    SELECT COUNT(`Country Code`)
    FROM wdi_country
  ) as "Total sum"
FROM base
  LEFT JOIN high ON base.region = high.region
  LEFT JOIN up_mid ON base.region = up_mid.region
  LEFT JOIN low_mid ON base.region = low_mid.region
  LEFT JOIN low ON base.region = low.region 
""")

```

## Task 21

```{python}
## ANOTHER DUNK!  Using the resulting table CTEs from Task 19,
## print a table listing the number, totals and percentage of countries
## by income category.

## (This is much simpler than task 20!)

run_sql_and_return_html(cnx,"""
SELECT wdi_country.`Income Group`,
  COUNT(`Country Code`) AS "Country count",
  (
    SELECT COUNT(`Country Code`)
    FROM wdi_country
  ) AS "Total countries",
  concat(
    round(COUNT(`Country Code`) * 100.0 / (
      SELECT COUNT(`Country Code`)
      FROM wdi_country
    ), 1),
    "%%"
  ) AS "Percentage"
FROM wdi_country
GROUP BY `Income Group`
""")

```


# Reflection

1. Reflect on the SQL skills you used throughout these exercises. Which skills do you feel most confident in, and which do you think need more practice? How has this assignment helped you build or reinforce specific SQL competencies?

I'm confident with basic SQL tools and simple queries. The more complex queries were difficult to conceptualize with my current SQL familiarity. Forcing myself to conceptualize them anyway has helped me understand how to use the tools I have available, and their limitations.

2. Problem-Solving Approach: Describe your approach to tackling the more complex tasks (like Tasks 18, 23, and 24). How did you break down these problems, and what steps did you take when you encountered challenges? How would you approach a similar problem differently in the future?

I tackled the obvious logical shapes first, then thought about the missing pieces. Sometimes I misunderstood how code would act in the given situation. Whenever I did run into a roadblock, I isolated the problem code, and looked for more functional alternatives.

3. Learning Takeaways: Consider the overall learning experience from this assignment. What were the biggest takeaways about working with SQL for data analysis and transformation? How do you think these skills will apply in real-world scenarios or future coursework?

'with' is very helpful, and I enjoy being able to use that to simplify my code. The 2d requirements of problem 15 seemed simple in output, but made me realize just how difficult queries can be to write. I imagine real-life scenarios have even more potential for discrepancies between output and code complexity. 


# README

::: {style="background:rgb(4, 59, 23) ; margin-left:20px; border-top: 3px solid black; border-bottom: 3px solid black; padding-left:20px; padding-right:20px; border-style:double; border-width:4px; border-color:darkgray;"}
{{< include ../README.md >}}
:::